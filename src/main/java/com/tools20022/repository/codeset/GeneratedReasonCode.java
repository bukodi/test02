package com.tools20022.repository.codeset;

import com.tools20022.metamodel.MMCode;
import com.tools20022.metamodel.MMCodeSet;
import java.util.Arrays;
import java.util.concurrent.atomic.AtomicReference;

/**
 * Specifies the reason why the transaction was generated.
 */
public class GeneratedReasonCode {

	final static private AtomicReference<MMCodeSet> mmObject_lazy = new AtomicReference<>();
	/**
	 * Transaction has been generated for collateral management purposes.
	 */
	public static final MMCode CollateralManagement = new MMCode() {
		{
			registrationStatus = com.tools20022.metamodel.MMRegistrationStatus.PROVISIONALLY_REGISTERED;
			name = "CollateralManagement";
			definition = "Transaction has been generated for collateral management purposes.";
			owner_lazy = () -> GeneratedReasonCode.mmObject();
			codeName = "COLL";
		}
	};
	/**
	 * Relates to the return of financial instruments resulting from a rejected
	 * delivery without matching operation.
	 */
	public static final MMCode ReturnRefusedDumps = new MMCode() {
		{
			registrationStatus = com.tools20022.metamodel.MMRegistrationStatus.PROVISIONALLY_REGISTERED;
			name = "ReturnRefusedDumps";
			definition = "Relates to the return of financial instruments resulting from a rejected delivery without matching operation.";
			owner_lazy = () -> GeneratedReasonCode.mmObject();
			codeName = "RODE";
		}
	};
	/**
	 * Transaction has been generated to enable settlement following a shortage
	 * of position.
	 */
	public static final MMCode SplitShaping = new MMCode() {
		{
			registrationStatus = com.tools20022.metamodel.MMRegistrationStatus.PROVISIONALLY_REGISTERED;
			name = "SplitShaping";
			definition = "Transaction has been generated to enable settlement following a shortage of position.";
			owner_lazy = () -> GeneratedReasonCode.mmObject();
			codeName = "SPLI";
		}
	};
	/**
	 * Transaction has been generated by a third party, for example, a central
	 * counterparty.
	 */
	public static final MMCode ThirdParty = new MMCode() {
		{
			registrationStatus = com.tools20022.metamodel.MMRegistrationStatus.PROVISIONALLY_REGISTERED;
			name = "ThirdParty";
			definition = "Transaction has been generated by a third party, for example, a central counterparty.";
			owner_lazy = () -> GeneratedReasonCode.mmObject();
			codeName = "THRD";
		}
	};
	/**
	 * Transaction has been generated due to transformation following a
	 * corporate action.
	 */
	public static final MMCode Transformation = new MMCode() {
		{
			registrationStatus = com.tools20022.metamodel.MMRegistrationStatus.PROVISIONALLY_REGISTERED;
			name = "Transformation";
			definition = "Transaction has been generated due to transformation following a corporate action.";
			owner_lazy = () -> GeneratedReasonCode.mmObject();
			codeName = "TRAN";
		}
	};
	/**
	 * Other. See Narrative.
	 */
	public static final MMCode Other = new MMCode() {
		{
			registrationStatus = com.tools20022.metamodel.MMRegistrationStatus.PROVISIONALLY_REGISTERED;
			name = "Other";
			definition = "Other. See Narrative.";
			owner_lazy = () -> GeneratedReasonCode.mmObject();
			codeName = "OTHR";
		}
	};
	/**
	 * Transaction resulting from a market claim.
	 */
	public static final MMCode MarketClaim = new MMCode() {
		{
			registrationStatus = com.tools20022.metamodel.MMRegistrationStatus.PROVISIONALLY_REGISTERED;
			name = "MarketClaim";
			definition = "Transaction resulting from a market claim.";
			owner_lazy = () -> GeneratedReasonCode.mmObject();
			codeName = "CLAI";
		}
	};

	static public MMCodeSet mmObject() {
		mmObject_lazy.compareAndSet(null, new MMCodeSet() {
			{
				dataDictionary_lazy = () -> com.tools20022.repository.GeneratedRepository.dataDict;
				example = Arrays.asList("COLL");
				registrationStatus = com.tools20022.metamodel.MMRegistrationStatus.REGISTERED;
				name = "GeneratedReasonCode";
				definition = "Specifies the reason why the transaction was generated.";
				code_lazy = () -> Arrays.asList(com.tools20022.repository.codeset.GeneratedReasonCode.CollateralManagement, com.tools20022.repository.codeset.GeneratedReasonCode.ReturnRefusedDumps,
						com.tools20022.repository.codeset.GeneratedReasonCode.SplitShaping, com.tools20022.repository.codeset.GeneratedReasonCode.ThirdParty, com.tools20022.repository.codeset.GeneratedReasonCode.Transformation,
						com.tools20022.repository.codeset.GeneratedReasonCode.Other, com.tools20022.repository.codeset.GeneratedReasonCode.MarketClaim);
			}
		});
		return mmObject_lazy.get();
	}
}